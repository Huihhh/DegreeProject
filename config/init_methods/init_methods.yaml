init_methods:
  normal:
    mean: 0.0
    std: 1.0
    name: normal_m${init_methods.normal.mean}s${init_methods.normal.std}
    func: 'lambda x: torch.nn.init.normal_(x, mean=${init_methods.normal.mean}, std=${init_methods.normal.std})'


  xavier_uniform: 
    gain: 1.0
    name: xu_g${init_methods.xavier_uniform.gain}
    func: 'lambda x: torch.nn.init.xavier_uniform_(x, gain=${init_methods.xavier_uniform.gain})'


  xavier_normal:
    gain: 1.0
    name: xn_g${init_methods.xavier_normal.gain}
    func: 'lambda x: torch.nn.init.xavier_normal_(x, gain=${init_methods.xavier_normal.gain})'

  he_normal:
    nonlinearity: relu
    name: hn_${init_methods.he_normal.nonlinearity}
    func: 'lambda x: torch.nn.init.kaiming_normal_(x, nonlinearity=${init_methods.he_normal.nonlinearity})'


  he_uniform:
    nonlinearity: relu
    name: hu_${init_methods.he_uniform.nonlinearity}
    func: 'lambda x: torch.nn.init.kaiming_uniform_(x, nonlinearity=${init_methods.he_uniform.nonlinearity})'


  zeros: 
    name: zeros
    func: torch.nn.init.zeros_

  ones: 
    name: ones
    func: torch.nn.init.ones_

  range_uniform:
    a: 0.8
    b: 1.2
    name: ru_${init_methods.range_uniform.a}-${init_methods.range_uniform.b}
    func: 'lambda x: range_uniform(x, ${init_methods.range_uniform.a}, ${init_methods.range_uniform.b})'

  manual:
    value: torch.ones(10) #TODO: to be finished
    func: 'lambda: x: x*${init_methods.manual.value}' 
